module Holotype where

type FB = FrameBuffer 1 '[ 'Color (Vec 4 Int)]

intV4I :: Int -> Vec 4 Int
intV4I x = V4
  ((x)            % 256) -- XXX: this is suboptimal, but we can't use shifts
  ((x / 256)      % 256) --      because of the shifts not supported by WebGL 1
  ((x / 65536)    % 256)
  ((x / 16777216) % 256)

scene :: String -> FB -> FB
scene name prevFB =
  Accumulate    ((ColorOp NoBlending (one :: Vec 4 Bool)))
  (mapFragments (\(uv, rgba) -> ((rgba)))
   $ rasterizePrimitives (TriangleCtx CullFront PolygonFill NoOffset LastVertex) (Flat, Flat)
   $ mapPrimitives
    (\(pos, _, id)->
      ( (Uniform "viewProj" :: Mat 4 4 Float) *. (V4 pos%x pos%y 0 1)
      , V2 0.0 0.0
      , intV4I id))
    $ fetch name ( Attribute "position"   :: Vec 3 Float
                 , Attribute "uv"         :: Vec 2 Float
                 , Attribute "id"         :: Int))
  prevFB

main :: Output
main = TextureOut (V2 800 600) $
       scene "portStream" $
       FrameBuffer ((colorImage1 (V4 0 0 0 0)))

-- Local Variables:
-- eval: (progn (haskell-mode) (intero-disable))
-- End:
