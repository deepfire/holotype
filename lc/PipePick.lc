module Holotype where

import Material hiding (Blending)

-- specialized snoc
snoc :: Vec 3 Float -> Float -> Vec 4 Float
snoc v s = V4 v%x v%y v%z s

snoc' :: Vec 3 Float -> Float -> Vec 4 Float
snoc' v s = V4 v%x v%y v%z s

mkaccumulationContext :: StageAttrs -> (FragmentOperation Depth, FragmentOperation (Color (Vec 4 Float)))
mkaccumulationContext sa = (DepthOp depthFunc depthWrite, ColorOp blend (one :: Vec 4 Bool))
  where
    depthWrite  = saDepthWrite sa
    depthFunc   = case saDepthFunc sa of
        D_Equal     -> Equal
        D_Lequal    -> Lequal
    cvt b = case b of
        B_DstAlpha          -> DstAlpha
        B_DstColor          -> DstColor
        B_One               -> OneBF
        B_OneMinusDstAlpha  -> OneMinusDstAlpha
        B_OneMinusDstColor  -> OneMinusDstColor
        B_OneMinusSrcAlpha  -> OneMinusSrcAlpha
        B_OneMinusSrcColor  -> OneMinusSrcColor
        B_SrcAlpha          -> SrcAlpha
        B_SrcAlphaSaturate  -> SrcAlphaSaturate
        B_SrcColor          -> SrcColor
        B_Zero              -> ZeroBF
    blend       = case saBlend sa of
        Nothing     -> NoBlending
        Just (src,dst)  -> Blend (FuncAdd,FuncAdd) ((srcF,dstF),(srcF,dstF)) one
          where
            srcF    = cvt src
            dstF    = cvt dst

mkColor :: CommonAttrs -> StageAttrs -> Vec 4 Float -> Vec 4 Float      -- V frequency
mkColor ca sa = \rgbaV ->
  let
    entityRGB       = Uniform "entityRGB" :: Vec 3 Float
    entityAlpha     = Uniform "entityAlpha" :: Float
    identityLight'  = Uniform "identityLight" :: Float
    --red             = V3 1 0 0
    white'          = V3 1 1 1.0
    rV  = rgbaV%r
    gV  = rgbaV%g
    bV  = rgbaV%b
    aV  = rgbaV%a
    rgb' :: Vec 3 Float
    rgb' = case saRGBGen sa of
        RGB_Const r g b         -> V3 r g b
        RGB_Identity            -> one
        RGB_IdentityLighting    -> V3 identityLight' identityLight' identityLight'
        RGB_Entity              -> entityRGB
        RGB_OneMinusEntity      -> one - entityRGB
        RGB_ExactVertex         -> V3 rV gV bV
        RGB_Vertex              -> (V3 rV gV bV) *! identityLight'
        RGB_LightingDiffuse     -> white' -- TODO
        {-  input:
                entity: ambientLight
                        directedLight
                        lightDir
                model:  position
                        normal
        -}
        RGB_OneMinusVertex      -> one - ((V3 rV gV bV) *! identityLight')

    alpha = case saAlphaGen sa of
        A_Const a           -> a
        A_Portal            -> 1 -- TODO
        A_Identity          -> 1
        A_Entity            -> entityAlpha
        A_OneMinusEntity    -> 1 -! entityAlpha
        A_Vertex            -> aV
        A_LightingSpecular  -> 1 -- TODO
        {-  input:
                model:  position
                        normal
                user:   viewOrigin
        -}
        A_OneMinusVertex    -> 1 -! aV
  in snoc' rgb' alpha

mkTexCoord :: Vec 3 Float -> Vec 3 Float -> StageAttrs -> Vec 2 Float -> Vec 2 Float -> Vec 2 Float
mkTexCoord pos normal = \sa -> \uvD uvL ->
    case saTCGen sa of
      TG_Base         -> uvD
      TG_Lightmap     -> uvL
      TG_Environment  ->  let viewOrigin  = Uniform "viewOrigin" :: Vec 3 Float
                              viewer      = normalize (viewOrigin - pos)
                              d           = normal `PrimDot` viewer
                              reflected   = (normal *! (2 *! d)) - viewer
                              y = reflected%y
                              z = reflected%z
                              v0_5        = 0.5
                          in V2 (v0_5 +! (y *! v0_5)) (v0_5 -! (z *! v0_5))
      TG_Vector (V3 sx sy sz) (V3 tx ty tz)       -> let s    = V3 sx sy sz :: Vec 3 Float
                                                         t    = V3 tx ty tz :: Vec 3 Float
                                                     in V2 (pos `PrimDot` s) (pos `PrimDot` t)

saTextureUniform' (StageAttrs _ _ _ _ _ _ _ _ _ _ a) = a

mkFragmentShader :: StageAttrs -> (Vec 2 Float,Vec 4 Float) -> ((Vec 4 Float))
mkFragmentShader sa{- @(StageAttrs _ _ _ _ _ _ _ _ _ _ texName)-} = \(uv,rgba) ->
  let
    texName   = saTextureUniform' sa
    texColor em name = texture2D (Sampler LinearFilter em (Texture2DSlot name)) uv
    color       = case saTexture sa of
        ST_WhiteImage   -> rgba
        ST_Lightmap     -> rgba * texColor ClampToEdge "LightMap"
        ST_Map _        -> rgba * texColor Repeat texName
        ST_ClampMap _   -> rgba * texColor ClampToEdge texName
        ST_AnimMap _ _  -> rgba * texColor Repeat texName
  in ((color))


maybe a b Nothing = a
maybe a b (Just x) = b x

type FB = FrameBuffer 1 '[ 'Depth, 'Color (Vec 4 Float)]

addOverlay :: String -> CommonAttrs -> FB -> FB
addOverlay name ca prevFB =
  let mode  = Uniform "mode" :: Int
      fb    = Accumulate                (mkaccumulationContext stage)
              (mapFragments             (mkFragmentShader stage)
               (maybe id filterFragments Nothing $
               (let args = fetch name    ( Attribute "position"   :: Vec 3 Float
                                        -- , Attribute "normal"     :: Vec 3 Float
                                         , Attribute "uv"         :: Vec 2 Float
                                         , Attribute "id"         :: Int)
                    pipel = rasterizePrimitives      (TriangleCtx CullFront PolygonFill NoOffset LastVertex) (Smooth, Smooth) $
                            mapPrimitives            (mkVertexShader ca stage) $
                            args
                in pipel))) prevFB
  in fb
  where
    mkVertexShader ca stage = \(pos, uv, id) -> -- \(pos, norm, diffuv) ->
      let viewProj  = Uniform "viewProj" :: Mat 4 4 Float
          screenPos = viewProj *. (V4 pos%x pos%y 0 1)
      in (screenPos
         ,mkTexCoord pos (V3 0 0 1) stage uv $ V2 0 0 -- last arg is UVL
         ,mkColor ca stage $ V4 0 0 0 1
         )
    stage           = head $ caStages ca

main :: Output
main = ScreenOut $
       addOverlay "portStream" portMtl $
       FrameBuffer (depthImage1 1000, colorImage1 (V4 0.002 0.002 0.008 1))

portMtl :: CommonAttrs
portMtl =
  CommonAttrs
  { caSkyParms       = ()
  , caFogParms       = ()
  , caPortal         = False
  , caSort           = 0
  , caEntityMergable = False
  , caFogOnly        = False
  , caCull           = CT_FrontSided
  , caDeformVertexes = []
  , caNoMipMaps      = False
  , caPolygonOffset  = False
  , caStages         = [stage]
  , caIsSky          = False
  }
  where -- XXX/LCC bug:  drop this where and align the rest & LCC blows up
    stage =
      StageAttrs
      { saBlend             = Just ( B_SrcAlpha , B_OneMinusSrcAlpha ) -- XXX/LCC bug:  field order is meaningful
      , saRGBGen            = RGB_IdentityLighting
      , saAlphaGen          = A_Identity
      , saTCGen             = TG_Base
      , saTCMod             = []
      , saTexture           = ST_ClampMap "portMtl"
      , saDepthWrite        = True
      , saDepthFunc         = D_Lequal
      , saAlphaFunc         = Nothing
      , saDepthMaskExplicit = False
      , saTextureUniform    = "portMtl"
      }

-- makeFrame (viewProj :: Mat 4 4 Float)
--           (texture :: Texture)
--           (prims :: PrimitiveStream Triangle (Vec 2 Float, Vec 2 Float)) =
--   -- let screenPos = viewProj *. snoc pos 1
--      imageFrame ((emptyColorImage (V4 0 0 0.2 1)))
--      `overlay`
--      prims
--      -- & mapPrimitives (\(p,uv) -> (rotMatrixZ time *. (V4 p%x p%y (-1) 1), uv))
--      & mapPrimitives (\(p, uv) -> (viewProj *. (V4 p%x p%y 0 1)
--                                   ,uv))
--      & rasterizePrimitives (TriangleCtx CullNone PolygonFill NoOffset LastVertex) ((Smooth))
--      & mapFragments (\((uv)) -> ((texture2D (Sampler PointFilter MirroredRepeat texture) uv)))
--      & accumulateWith ((ColorOp NoBlending (V4 True True True True)))

-- main = renderFrame $
--    makeFrame (Uniform "viewProj")
--              (Texture2DSlot "portMtl")
--              (fetch "portStream" (Attribute "position", Attribute "uv"))

-- Local Variables:
-- eval: (progn (haskell-mode) (intero-disable))
-- End:
