module Holotype where

type ColorComponent = Float

type FB = FrameBuffer 1 '[ 'Depth, 'Color (Vec 4 ColorComponent)]

mkaccumulationContext :: (FragmentOperation Depth, FragmentOperation (Color (Vec 4 ColorComponent)))
mkaccumulationContext = ( DepthOp Always False
                        , ColorOp NoBlending (one :: Vec 4 Bool))

fragmap :: (Vec 2 Float, Vec 4 ColorComponent) -> ((Vec 4 ColorComponent))
fragmap (uv, rgba) = ((rgba))

scene :: String -> FB -> FB
scene name prevFB =
  Accumulate    mkaccumulationContext
  (mapFragments
     fragmap
   $ maybe id filterFragments Nothing
   $ rasterizePrimitives (TriangleCtx CullFront PolygonFill NoOffset LastVertex) (Flat, Flat)
   $ mapPrimitives
    (\(pos, uv, id)->
      ( (Uniform "viewProj" :: Mat 4 4 Float) *. (V4 pos%x pos%y 0 1)
      , uv
      , id))
    $ fetch name ( Attribute "position"   :: Vec 3 Float
                 , Attribute "uv"         :: Vec 2 Float
                 , Attribute "id"         :: Vec 4 Float))
  prevFB
  where
    maybe a b Nothing = a
    maybe a b (Just x) = b x
    

main :: Output
main = ScreenOut $
       scene "portStream" $
       FrameBuffer (depthImage1 1000, colorImage1 (V4 0 0 0 0))

-- Local Variables:
-- eval: (progn (haskell-mode) (intero-disable))
-- End:
